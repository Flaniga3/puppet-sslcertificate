function Add-Users {
  foreach($user in <%= @usernames %>) {
		# $certCN is the identifiying CN for the certificate you wish to work with
		# The selection also sorts on Expiration date, just in case there are old expired certs still in the certificate store.
		#  Make sure we work with the most recent cert 
		$certCN = "<%= @friendlyname %>"

		Try
		{
				$WorkingCert = Get-ChildItem CERT:\LocalMachine\My | where {$_.FriendlyName -match $certCN} | sort $_.NotAfter -Descending | select -first 1 -erroraction STOP
				$rsaFile = $WorkingCert.PrivateKey.CspKeyContainerInfo.UniqueKeyContainerName
		}
		Catch
		{
				"Error: unable to locate certificate for $($CertCN)"
				Exit
		}

		$keyPath = "C:\ProgramData\Microsoft\Crypto\RSA\MachineKeys\"
		$fullPath=$keyPath+$rsaFile
		$acl= (Get-Item $fullPath).GetAccessControl('Access')
		$permission= $user,"Read","Allow"
		$accessRule=new-object System.Security.AccessControl.FileSystemAccessRule $permission
		$acl.AddAccessRule($accessRule)

		Try
		{
				Set-Acl $fullPath $acl
				"Success: ACL set on certificate"
		}
		Catch
		{
				"Error: unable to set ACL on certificate"
				Exit
		}
  }
}

$pfx = new-object System.Security.Cryptography.X509Certificates.X509Certificate2

$cert = gi <%= @location %>/<%= @name %>

switch -regex ($cert.Extension.ToUpper()) {
    ".CER|.DER|.P12" {
        $pfx.import("<%= @location %>\\<%= @name %>","<%= @password %>","Exportable,PersistKeySet")
    }
    ".CRT" {
        $pfx.Import([System.IO.File]::ReadAllBytes("<%= @location %>\\<%= @name %>"))
    }
    ".P7B|.SST" {
        $pfx = new-object System.Security.Cryptography.X509Certificates.X509Certificate2Collection
        $pfx.Import([System.IO.File]::ReadAllBytes("<%= @location %>\\<%= @name %>"))
    }
    ".PFX" {
        $pfx = new-object System.Security.Cryptography.X509Certificates.X509Certificate2Collection
        $pfx.import("<%= @location %>\\<%= @name %>","<%= @password %>","Exportable,PersistKeySet")
    }
}

$store = new-object System.Security.Cryptography.X509Certificates.X509Store("<%= @store_dir %>","<%= @root_store %>")
$store.open([System.Security.Cryptography.X509Certificates.OpenFlags]::ReadWrite)

$intermediatestore = new-object System.Security.Cryptography.X509Certificates.X509Store("CA","<%= @root_store %>")
$intermediatestore.open([System.Security.Cryptography.X509Certificates.OpenFlags]::ReadWrite)

foreach($cert in $pfx) {
  $cert.FriendlyName = "<%= @friendlyname %>"
  $Acl = Get-Acl -Path $cert.FullName
  if($cert.Thumbprint -ne "<%= @thumbprint %>") {
      $intermediatestore.Add($cert)
  }
  else {
      $store.Add($cert)
			Add-Users
  }
}



$store.close()
